#ifndef JLI_H
#define JLI_H

#pragma jli_call_always(AccelerationMonitor_configure);
#pragma jli_call_always(AccelerationMonitor_detectMotion);
#pragma jli_call_always(AccelerationMonitor_doStep);
#pragma jli_call_always(AccelerationMonitor_dump);
#pragma jli_call_always(AccelerationMonitor_getConfiguration);
#pragma jli_call_always(AccelerationMonitor_getPropertyIds);
#pragma jli_call_always(AccelerationMonitor_getState);
#pragma jli_call_always(AccelerationMonitor_instantiate);
#pragma jli_call_always(AccelerationMonitor_isMagnitudeOneG);
#pragma jli_call_always(AccelerationMonitor_reset);
#pragma jli_call_always(AccelerationMonitor_setDebugLevel);
#pragma jli_call_always(AccelerationMonitor_setState);
#pragma jli_call_always(AccelerationMonitor_updateInterfaceDependency);
#pragma jli_call_always(AccelerometerCalibrator_configure);
#pragma jli_call_always(AccelerometerCalibrator_doStep);
#pragma jli_call_always(AccelerometerCalibrator_dump);
#pragma jli_call_always(AccelerometerCalibrator_getConfiguration);
#pragma jli_call_always(AccelerometerCalibrator_getPropertyIds);
#pragma jli_call_always(AccelerometerCalibrator_getState);
#pragma jli_call_always(AccelerometerCalibrator_instantiate);
#pragma jli_call_always(AccelerometerCalibrator_reset);
#pragma jli_call_always(AccelerometerCalibrator_runAccuracyMonitoring);
#pragma jli_call_always(AccelerometerCalibrator_runCalibration);
#pragma jli_call_always(AccelerometerCalibrator_runDynamicLevelMonitoring);
#pragma jli_call_always(AccelerometerCalibrator_runGravityCheck);
#pragma jli_call_always(AccelerometerCalibrator_runOrientationChangeMonitoring);
#pragma jli_call_always(AccelerometerCalibrator_setDebugLevel);
#pragma jli_call_always(AccelerometerCalibrator_setState);
#pragma jli_call_always(AccelerometerCalibrator_updateInterfaceDependency);
#pragma jli_call_always(ActivityRecognizer_configure);
#pragma jli_call_always(ActivityRecognizer_decisionTree);
#pragma jli_call_always(ActivityRecognizer_doStep);
#pragma jli_call_always(ActivityRecognizer_dump);
#pragma jli_call_always(ActivityRecognizer_getConfiguration);
#pragma jli_call_always(ActivityRecognizer_getPropertyIds);
#pragma jli_call_always(ActivityRecognizer_getState);
#pragma jli_call_always(ActivityRecognizer_instantiate);
#pragma jli_call_always(ActivityRecognizer_probabilityPostFilter);
#pragma jli_call_always(ActivityRecognizer_reset);
#pragma jli_call_always(ActivityRecognizer_setDebugLevel);
#pragma jli_call_always(ActivityRecognizer_setState);
#pragma jli_call_always(ActivityRecognizer_updateInterfaceDependency);
#pragma jli_call_always(ActivityRecognizer_vecMagnitudeInvSqrt);
#pragma jli_call_always(AngularRateMonitor_doStep);
#pragma jli_call_always(Bsx4DataSelection_run);
#pragma jli_call_always(Bsx4DataSelection_setClusterSize);
#pragma jli_call_always(Bsx4DataSelection_setConfiguration);
#pragma jli_call_always(Bsx4OffsetCalibEkf_run);
#pragma jli_call_always(Bsx4OffsetCalibEkf_setConfiguration);
#pragma jli_call_always(Bsx4OffsetCalibEkf_setState);
#pragma jli_call_always(Bsx_dump);
#pragma jli_call_always(Bsx_getHyperConfiguration);
#pragma jli_call_always(Bsx_getHyperState);
#pragma jli_call_always(Bsx_getPropertyIds);
#pragma jli_call_always(Bsx_reset);
#pragma jli_call_always(Bsx_resetHyper);
#pragma jli_call_always(Bsx_setHyperConfiguration);
#pragma jli_call_always(Bsx_setHyperState);
#pragma jli_call_always(Channel_configure);
#pragma jli_call_always(Channel_setState);
#pragma jli_call_always(Compound_resetHyper);
#pragma jli_call_always(ConditionerBsx_configure);
#pragma jli_call_always(ConditionerBsx_doStep);
#pragma jli_call_always(ConditionerBsx_dump);
#pragma jli_call_always(ConditionerBsx_getConfiguration);
#pragma jli_call_always(ConditionerBsx_getPropertyIds);
#pragma jli_call_always(ConditionerBsx_getState);
#pragma jli_call_always(ConditionerBsx_instantiate);
#pragma jli_call_always(ConditionerBsx_reset);
#pragma jli_call_always(ConditionerBsx_setDebugLevel);
#pragma jli_call_always(ConditionerBsx_setState);
#pragma jli_call_always(ConditionerBsx_updateInterfaceDependency);
#pragma jli_call_always(Conditioner_doStep);
#pragma jli_call_always(Conditioner_getState);
#pragma jli_call_always(Conditioner_setState);
#pragma jli_call_always(DirectionTrackerCompass_accelFusion);
#pragma jli_call_always(DirectionTrackerCompass_calcAngularRate);
#pragma jli_call_always(DirectionTrackerCompass_calcHeadingAccuracy);
#pragma jli_call_always(DirectionTrackerCompass_configure);
#pragma jli_call_always(DirectionTrackerCompass_doStep);
#pragma jli_call_always(DirectionTrackerCompass_dump);
#pragma jli_call_always(DirectionTrackerCompass_getConfiguration);
#pragma jli_call_always(DirectionTrackerCompass_getPropertyIds);
#pragma jli_call_always(DirectionTrackerCompass_getState);
#pragma jli_call_always(DirectionTrackerCompass_instantiate);
#pragma jli_call_always(DirectionTrackerCompass_magFusion);
#pragma jli_call_always(DirectionTrackerCompass_reset);
#pragma jli_call_always(DirectionTrackerCompass_setDebugLevel);
#pragma jli_call_always(DirectionTrackerCompass_setState);
#pragma jli_call_always(DirectionTrackerCompass_updateInterfaceDependency);
#pragma jli_call_always(DirectionTrackerImu_compensateLinearAcceleration);
#pragma jli_call_always(DirectionTrackerImu_configure);
#pragma jli_call_always(DirectionTrackerImu_doStep);
#pragma jli_call_always(DirectionTrackerImu_dump);
#pragma jli_call_always(DirectionTrackerImu_getConfiguration);
#pragma jli_call_always(DirectionTrackerImu_getPropertyIds);
#pragma jli_call_always(DirectionTrackerImu_getState);
#pragma jli_call_always(DirectionTrackerImu_imuFusion);
#pragma jli_call_always(DirectionTrackerImu_instantiate);
#pragma jli_call_always(DirectionTrackerImu_reset);
#pragma jli_call_always(DirectionTrackerImu_setConfigurationDefault);
#pragma jli_call_always(DirectionTrackerImu_setConfigurationSerialized);
#pragma jli_call_always(DirectionTrackerImu_setDebugLevel);
#pragma jli_call_always(DirectionTrackerImu_setState);
#pragma jli_call_always(DirectionTrackerImu_setStateDefault);
#pragma jli_call_always(DirectionTrackerImu_setStateSerialized);
#pragma jli_call_always(DirectionTrackerImu_timeIntegrationOrientation);
#pragma jli_call_always(DirectionTrackerImu_updateInterfaceDependency);
#pragma jli_call_always(DirectionTrackerNdof_calcHeadingAccuracy);
#pragma jli_call_always(DirectionTrackerNdof_configure);
#pragma jli_call_always(DirectionTrackerNdof_doStep);
#pragma jli_call_always(DirectionTrackerNdof_dump);
#pragma jli_call_always(DirectionTrackerNdof_getConfiguration);
#pragma jli_call_always(DirectionTrackerNdof_getPropertyIds);
#pragma jli_call_always(DirectionTrackerNdof_getState);
#pragma jli_call_always(DirectionTrackerNdof_instantiate);
#pragma jli_call_always(DirectionTrackerNdof_magFusion);
#pragma jli_call_always(DirectionTrackerNdof_reset);
#pragma jli_call_always(DirectionTrackerNdof_resetBuffer);
#pragma jli_call_always(DirectionTrackerNdof_setConfigurationSerialized);
#pragma jli_call_always(DirectionTrackerNdof_setDebugLevel);
#pragma jli_call_always(DirectionTrackerNdof_setState);
#pragma jli_call_always(DirectionTrackerNdof_setStateSerialized);
#pragma jli_call_always(DirectionTrackerNdof_updateInterfaceDependency);
#pragma jli_call_always(GlanceDetector_configure);
#pragma jli_call_always(GlanceDetector_doStep);
#pragma jli_call_always(GlanceDetector_dump);
#pragma jli_call_always(GlanceDetector_getConfiguration);
#pragma jli_call_always(GlanceDetector_getPropertyIds);
#pragma jli_call_always(GlanceDetector_getState);
#pragma jli_call_always(GlanceDetector_instantiate);
#pragma jli_call_always(GlanceDetector_reset);
#pragma jli_call_always(GlanceDetector_resetStates);
#pragma jli_call_always(GlanceDetector_setDebugLevel);
#pragma jli_call_always(GlanceDetector_setState);
#pragma jli_call_always(GlanceDetector_updateInterfaceDependency);
#pragma jli_call_always(GravityReckoner_calculateHeadingAccuracyLevel);
#pragma jli_call_always(GravityReckoner_configure);
#pragma jli_call_always(GravityReckoner_doStep);
#pragma jli_call_always(GravityReckoner_dump);
#pragma jli_call_always(GravityReckoner_getConfiguration);
#pragma jli_call_always(GravityReckoner_getPropertyIds);
#pragma jli_call_always(GravityReckoner_getState);
#pragma jli_call_always(GravityReckoner_instantiate);
#pragma jli_call_always(GravityReckoner_reset);
#pragma jli_call_always(GravityReckoner_setDebugLevel);
#pragma jli_call_always(GravityReckoner_setState);
#pragma jli_call_always(GravityReckoner_updateInterfaceDependency);
#pragma jli_call_always(GyroscopeCalibrator_configure);
#pragma jli_call_always(GyroscopeCalibrator_doStep);
#pragma jli_call_always(GyroscopeCalibrator_dump);
#pragma jli_call_always(GyroscopeCalibrator_getConfiguration);
#pragma jli_call_always(GyroscopeCalibrator_getPropertyIds);
#pragma jli_call_always(GyroscopeCalibrator_getState);
#pragma jli_call_always(GyroscopeCalibrator_instantiate);
#pragma jli_call_always(GyroscopeCalibrator_reset);
#pragma jli_call_always(GyroscopeCalibrator_setDebugLevel);
#pragma jli_call_always(GyroscopeCalibrator_setState);
#pragma jli_call_always(GyroscopeCalibrator_updateInterfaceDependency);
#pragma jli_call_always(MagneticFieldMonitor_configure);
#pragma jli_call_always(MagneticFieldMonitor_doStep);
#pragma jli_call_always(MagneticFieldMonitor_dump);
#pragma jli_call_always(MagneticFieldMonitor_getConfiguration);
#pragma jli_call_always(MagneticFieldMonitor_getPropertyIds);
#pragma jli_call_always(MagneticFieldMonitor_getState);
#pragma jli_call_always(MagneticFieldMonitor_instantiate);
#pragma jli_call_always(MagneticFieldMonitor_reset);
#pragma jli_call_always(MagneticFieldMonitor_setDebugLevel);
#pragma jli_call_always(MagneticFieldMonitor_setState);
#pragma jli_call_always(MagneticFieldMonitor_updateInterfaceDependency);
#pragma jli_call_always(MagnetometerCalibratorFast_checkDynamic);
#pragma jli_call_always(MagnetometerCalibratorFast_configure);
#pragma jli_call_always(MagnetometerCalibratorFast_doStep);
#pragma jli_call_always(MagnetometerCalibratorFast_dump);
#pragma jli_call_always(MagnetometerCalibratorFast_getAccuracy);
#pragma jli_call_always(MagnetometerCalibratorFast_getConfiguration);
#pragma jli_call_always(MagnetometerCalibratorFast_getPropertyIds);
#pragma jli_call_always(MagnetometerCalibratorFast_getState);
#pragma jli_call_always(MagnetometerCalibratorFast_instantiate);
#pragma jli_call_always(MagnetometerCalibratorFast_mainloop);
#pragma jli_call_always(MagnetometerCalibratorFast_reset);
#pragma jli_call_always(MagnetometerCalibratorFast_setDebugLevel);
#pragma jli_call_always(MagnetometerCalibratorFast_setState);
#pragma jli_call_always(MagnetometerCalibratorFast_updateInterfaceDependency);
#pragma jli_call_always(MagnetometerCalibrator_addToBuffer);
#pragma jli_call_always(MagnetometerCalibrator_configure);
#pragma jli_call_always(MagnetometerCalibrator_doStep);
#pragma jli_call_always(MagnetometerCalibrator_dump);
#pragma jli_call_always(MagnetometerCalibrator_getAccuracy);
#pragma jli_call_always(MagnetometerCalibrator_getConfiguration);
#pragma jli_call_always(MagnetometerCalibrator_getPropertyIds);
#pragma jli_call_always(MagnetometerCalibrator_getState);
#pragma jli_call_always(MagnetometerCalibrator_instantiate);
#pragma jli_call_always(MagnetometerCalibrator_reset);
#pragma jli_call_always(MagnetometerCalibrator_runCalibration);
#pragma jli_call_always(MagnetometerCalibrator_runDataSelection);
#pragma jli_call_always(MagnetometerCalibrator_runDynamicLevelMonitoring);
#pragma jli_call_always(MagnetometerCalibrator_runMagneticDistortionCheck);
#pragma jli_call_always(MagnetometerCalibrator_runOrientationChangeMonitoring);
#pragma jli_call_always(MagnetometerCalibrator_setDebugLevel);
#pragma jli_call_always(MagnetometerCalibrator_setState);
#pragma jli_call_always(MagnetometerCalibrator_updateInterfaceDependency);
#pragma jli_call_always(PickupDetector_configure);
#pragma jli_call_always(PickupDetector_doStep);
#pragma jli_call_always(PickupDetector_dump);
#pragma jli_call_always(PickupDetector_getConfiguration);
#pragma jli_call_always(PickupDetector_getPropertyIds);
#pragma jli_call_always(PickupDetector_getState);
#pragma jli_call_always(PickupDetector_instantiate);
#pragma jli_call_always(PickupDetector_reset);
#pragma jli_call_always(PickupDetector_resetState);
#pragma jli_call_always(PickupDetector_setDebugLevel);
#pragma jli_call_always(PickupDetector_setState);
#pragma jli_call_always(PickupDetector_updateInterfaceDependency);
#pragma jli_call_always(PreProcessor_configure);
#pragma jli_call_always(PreProcessor_doStep);
#pragma jli_call_always(PreProcessor_dump);
#pragma jli_call_always(PreProcessor_getConfiguration);
#pragma jli_call_always(PreProcessor_getPropertyIds);
#pragma jli_call_always(PreProcessor_getState);
#pragma jli_call_always(PreProcessor_instantiate);
#pragma jli_call_always(PreProcessor_reset);
#pragma jli_call_always(PreProcessor_setDebugLevel);
#pragma jli_call_always(PreProcessor_setPreProcessingMethod);
#pragma jli_call_always(PreProcessor_setState);
#pragma jli_call_always(PreProcessor_stepImpl);
#pragma jli_call_always(PreProcessor_updateInterfaceDependency);
#pragma jli_call_always(Quaternion_conjugate);
#pragma jli_call_always(Quaternion_getGravRefInSensorFrame);
#pragma jli_call_always(Quaternion_getQuatRotToAxis);
#pragma jli_call_always(Quaternion_getRotationMatrixFromQuat);
#pragma jli_call_always(Quaternion_multiply);
#pragma jli_call_always(Quaternion_multiply1NoZ);
#pragma jli_call_always(Quaternion_normalize);
#pragma jli_call_always(Quaternion_rotateVector);
#pragma jli_call_always(Quaternion_updateRotation);
#pragma jli_call_always(RingBufferMotion_initBuffer);
#pragma jli_call_always(RingBuffer_do);
#pragma jli_call_always(RingBuffer_getAt);
#pragma jli_call_always(RingBuffer_reset);
#pragma jli_call_always(RingBuffer_setLength);
#pragma jli_call_always(Serialization_checkSerializationHeader);
#pragma jli_call_always(Serialization_prepareSerializationHeader);
#pragma jli_call_always(SignificantMotionDetector_configure);
#pragma jli_call_always(SignificantMotionDetector_doStep);
#pragma jli_call_always(SignificantMotionDetector_dump);
#pragma jli_call_always(SignificantMotionDetector_getConfiguration);
#pragma jli_call_always(SignificantMotionDetector_getPropertyIds);
#pragma jli_call_always(SignificantMotionDetector_getState);
#pragma jli_call_always(SignificantMotionDetector_instantiate);
#pragma jli_call_always(SignificantMotionDetector_reset);
#pragma jli_call_always(SignificantMotionDetector_setDebugLevel);
#pragma jli_call_always(SignificantMotionDetector_setState);
#pragma jli_call_always(SignificantMotionDetector_updateInterfaceDependency);
#pragma jli_call_always(StepDetector_configure);
#pragma jli_call_always(StepDetector_doStep);
#pragma jli_call_always(StepDetector_dump);
#pragma jli_call_always(StepDetector_getConfiguration);
#pragma jli_call_always(StepDetector_getPropertyIds);
#pragma jli_call_always(StepDetector_getState);
#pragma jli_call_always(StepDetector_instantiate);
#pragma jli_call_always(StepDetector_reset);
#pragma jli_call_always(StepDetector_setDebugLevel);
#pragma jli_call_always(StepDetector_setState);
#pragma jli_call_always(StepDetector_updateInterfaceDependency);
#pragma jli_call_always(TapDetector_configure);
#pragma jli_call_always(TapDetector_doStep);
#pragma jli_call_always(TapDetector_dump);
#pragma jli_call_always(TapDetector_getConfiguration);
#pragma jli_call_always(TapDetector_getPropertyIds);
#pragma jli_call_always(TapDetector_getState);
#pragma jli_call_always(TapDetector_instantiate);
#pragma jli_call_always(TapDetector_reset);
#pragma jli_call_always(TapDetector_setDebugLevel);
#pragma jli_call_always(TapDetector_setState);
#pragma jli_call_always(TapDetector_updateInterfaceDependency);
#pragma jli_call_always(TiltDetector_configure);
#pragma jli_call_always(TiltDetector_doStep);
#pragma jli_call_always(TiltDetector_dump);
#pragma jli_call_always(TiltDetector_fastInvVecNorm);
#pragma jli_call_always(TiltDetector_getConfiguration);
#pragma jli_call_always(TiltDetector_getPropertyIds);
#pragma jli_call_always(TiltDetector_getState);
#pragma jli_call_always(TiltDetector_instantiate);
#pragma jli_call_always(TiltDetector_reset);
#pragma jli_call_always(TiltDetector_setDebugLevel);
#pragma jli_call_always(TiltDetector_setState);
#pragma jli_call_always(TiltDetector_updateInterfaceDependency);
#pragma jli_call_always(TurnOff_configure);
#pragma jli_call_always(TurnOff_doStep);
#pragma jli_call_always(TurnOff_dump);
#pragma jli_call_always(TurnOff_getConfiguration);
#pragma jli_call_always(TurnOff_getPropertyIds);
#pragma jli_call_always(TurnOff_getState);
#pragma jli_call_always(TurnOff_instantiate);
#pragma jli_call_always(TurnOff_reset);
#pragma jli_call_always(TurnOff_setDebugLevel);
#pragma jli_call_always(TurnOff_setState);
#pragma jli_call_always(TurnOff_updateInterfaceDependency);
#pragma jli_call_always(VectorOperation_correctOffset);
#pragma jli_call_always(VectorOperation_correctSensitivityDiagonal);
#pragma jli_call_always(VectorOperation_correctSensitivityFull);
#pragma jli_call_always(VectorOperation_minMax);
#pragma jli_call_always(VectorOperation_normalizeVec);
#pragma jli_call_always(VectorOperation_saturate);
#pragma jli_call_always(WristTilt_configure);
#pragma jli_call_always(WristTilt_doStep);
#pragma jli_call_always(WristTilt_dump);
#pragma jli_call_always(WristTilt_getConfiguration);
#pragma jli_call_always(WristTilt_getPropertyIds);
#pragma jli_call_always(WristTilt_getState);
#pragma jli_call_always(WristTilt_instantiate);
#pragma jli_call_always(WristTilt_reset);
#pragma jli_call_always(WristTilt_setDebugLevel);
#pragma jli_call_always(WristTilt_setState);
#pragma jli_call_always(WristTilt_updateInterfaceDependency);
#pragma jli_call_always(add_link);
#pragma jli_call_always(any);
#pragma jli_call_always(atan2Approx);
#pragma jli_call_always(b_AccelerationMonitor_configure);
#pragma jli_call_always(b_AccelerometerCalibrator_reset);
#pragma jli_call_always(b_ActivityRecognizer_reset);
#pragma jli_call_always(b_ActivityRecognizer_setState);
#pragma jli_call_always(b_Bsx_setHyperConfiguration);
#pragma jli_call_always(b_Channel_configure);
#pragma jli_call_always(b_ConditionerBsx_configure);
#pragma jli_call_always(b_ConditionerBsx_getConfiguration);
#pragma jli_call_always(b_ConditionerBsx_getPropertyIds);
#pragma jli_call_always(b_Conditioner_setState);
#pragma jli_call_always(b_DirectionTrackerCompass_reset);
#pragma jli_call_always(b_DirectionTrackerImu_imuFusion);
#pragma jli_call_always(b_DirectionTrackerImu_reset);
#pragma jli_call_always(b_DirectionTrackerImu_setConfigurationSerialized);
#pragma jli_call_always(b_DirectionTrackerImu_setStateSerialized);
#pragma jli_call_always(b_DirectionTrackerImu_timeIntegrationOrientation);
#pragma jli_call_always(b_DirectionTrackerNdof_reset);
#pragma jli_call_always(b_GlanceDetector_setState);
#pragma jli_call_always(b_GyroscopeCalibrator_reset);
#pragma jli_call_always(b_MagneticFieldMonitor_configure);
#pragma jli_call_always(b_MagnetometerCalibratorFast_reset);
#pragma jli_call_always(b_MagnetometerCalibratorFast_updateInterfaceDependency);
#pragma jli_call_always(b_MagnetometerCalibrator_reset);
#pragma jli_call_always(b_PickupDetector_setState);
#pragma jli_call_always(b_PreProcessor_reset);
#pragma jli_call_always(b_SignificantMotionDetector_reset);
#pragma jli_call_always(b_StepDetector_reset);
#pragma jli_call_always(b_TapDetector_reset);
#pragma jli_call_always(b_TiltDetector_setState);
#pragma jli_call_always(b_VectorOperation_correctSensitivityFull);
#pragma jli_call_always(b_WristTilt_setState);
#pragma jli_call_always(b_any);
#pragma jli_call_always(bsx_acceleration_monitor_do_step);
#pragma jli_call_always(bsx_acceleration_monitor_get_configuration);
#pragma jli_call_always(bsx_acceleration_monitor_get_property_id);
#pragma jli_call_always(bsx_acceleration_monitor_get_state);
#pragma jli_call_always(bsx_acceleration_monitor_reset);
#pragma jli_call_always(bsx_acceleration_monitor_set_configuration);
#pragma jli_call_always(bsx_acceleration_monitor_set_state);
#pragma jli_call_always(bsx_acceleration_monitor_update_interface_dependency);
#pragma jli_call_always(bsx_accelerometer_calibrator_do_step);
#pragma jli_call_always(bsx_accelerometer_calibrator_get_configuration);
#pragma jli_call_always(bsx_accelerometer_calibrator_get_property_id);
#pragma jli_call_always(bsx_accelerometer_calibrator_get_state);
#pragma jli_call_always(bsx_accelerometer_calibrator_reset);
#pragma jli_call_always(bsx_accelerometer_calibrator_set_configuration);
#pragma jli_call_always(bsx_accelerometer_calibrator_set_state);
#pragma jli_call_always(bsx_accelerometer_calibrator_update_interface_dependency);
#pragma jli_call_always(bsx_activity_recognizer_do_step);
#pragma jli_call_always(bsx_activity_recognizer_get_configuration);
#pragma jli_call_always(bsx_activity_recognizer_get_property_id);
#pragma jli_call_always(bsx_activity_recognizer_get_state);
#pragma jli_call_always(bsx_activity_recognizer_reset);
#pragma jli_call_always(bsx_activity_recognizer_set_configuration);
#pragma jli_call_always(bsx_activity_recognizer_set_state);
#pragma jli_call_always(bsx_activity_recognizer_update_interface_dependency);
#pragma jli_call_always(bsx_angularrate_status_update);
#pragma jli_call_always(bsx_conditioner_acceleration_do_step);
#pragma jli_call_always(bsx_conditioner_acceleration_get_configuration);
#pragma jli_call_always(bsx_conditioner_acceleration_get_property_id);
#pragma jli_call_always(bsx_conditioner_acceleration_get_state);
#pragma jli_call_always(bsx_conditioner_acceleration_reset);
#pragma jli_call_always(bsx_conditioner_acceleration_set_configuration);
#pragma jli_call_always(bsx_conditioner_acceleration_set_state);
#pragma jli_call_always(bsx_conditioner_acceleration_update_interface_dependency);
#pragma jli_call_always(bsx_conditioner_angularrate_do_step);
#pragma jli_call_always(bsx_conditioner_angularrate_get_configuration);
#pragma jli_call_always(bsx_conditioner_angularrate_get_property_id);
#pragma jli_call_always(bsx_conditioner_angularrate_get_state);
#pragma jli_call_always(bsx_conditioner_angularrate_reset);
#pragma jli_call_always(bsx_conditioner_angularrate_set_configuration);
#pragma jli_call_always(bsx_conditioner_angularrate_set_state);
#pragma jli_call_always(bsx_conditioner_angularrate_update_interface_dependency);
#pragma jli_call_always(bsx_conditioner_magneticfield_do_step);
#pragma jli_call_always(bsx_conditioner_magneticfield_get_configuration);
#pragma jli_call_always(bsx_conditioner_magneticfield_get_property_id);
#pragma jli_call_always(bsx_conditioner_magneticfield_get_state);
#pragma jli_call_always(bsx_conditioner_magneticfield_reset);
#pragma jli_call_always(bsx_conditioner_magneticfield_set_configuration);
#pragma jli_call_always(bsx_conditioner_magneticfield_set_state);
#pragma jli_call_always(bsx_conditioner_magneticfield_update_interface_dependency);
#pragma jli_call_always(bsx_config_init);
#pragma jli_call_always(bsx_directiontracker_compass_do_step);
#pragma jli_call_always(bsx_directiontracker_compass_get_configuration);
#pragma jli_call_always(bsx_directiontracker_compass_get_property_id);
#pragma jli_call_always(bsx_directiontracker_compass_get_state);
#pragma jli_call_always(bsx_directiontracker_compass_reset);
#pragma jli_call_always(bsx_directiontracker_compass_set_configuration);
#pragma jli_call_always(bsx_directiontracker_compass_set_state);
#pragma jli_call_always(bsx_directiontracker_compass_update_interface_dependency);
#pragma jli_call_always(bsx_directiontracker_imu_do_step);
#pragma jli_call_always(bsx_directiontracker_imu_get_configuration);
#pragma jli_call_always(bsx_directiontracker_imu_get_property_id);
#pragma jli_call_always(bsx_directiontracker_imu_get_state);
#pragma jli_call_always(bsx_directiontracker_imu_reset);
#pragma jli_call_always(bsx_directiontracker_imu_set_configuration);
#pragma jli_call_always(bsx_directiontracker_imu_set_state);
#pragma jli_call_always(bsx_directiontracker_imu_update_interface_dependency);
#pragma jli_call_always(bsx_directiontracker_ndof_do_step);
#pragma jli_call_always(bsx_directiontracker_ndof_get_configuration);
#pragma jli_call_always(bsx_directiontracker_ndof_get_property_id);
#pragma jli_call_always(bsx_directiontracker_ndof_get_state);
#pragma jli_call_always(bsx_directiontracker_ndof_reset);
#pragma jli_call_always(bsx_directiontracker_ndof_set_configuration);
#pragma jli_call_always(bsx_directiontracker_ndof_set_state);
#pragma jli_call_always(bsx_directiontracker_ndof_update_interface_dependency);
#pragma jli_call_always(bsx_do_steps);
#pragma jli_call_always(bsx_do_steps_x32);
#pragma jli_call_always(bsx_dump);
#pragma jli_call_always(bsx_get_configuration);
#pragma jli_call_always(bsx_get_multiple_outputs);
#pragma jli_call_always(bsx_get_multiple_outputs_x32);
#pragma jli_call_always(bsx_get_operation_state);
#pragma jli_call_always(bsx_get_sensor_characteristics);
#pragma jli_call_always(bsx_get_single_output);
#pragma jli_call_always(bsx_get_single_output_x32);
#pragma jli_call_always(bsx_get_state);
#pragma jli_call_always(bsx_get_state_with_options);
#pragma jli_call_always(bsx_get_version);
#pragma jli_call_always(bsx_get_version_string);
#pragma jli_call_always(bsx_glance_detector_do_step);
#pragma jli_call_always(bsx_glance_detector_get_configuration);
#pragma jli_call_always(bsx_glance_detector_get_property_id);
#pragma jli_call_always(bsx_glance_detector_get_state);
#pragma jli_call_always(bsx_glance_detector_reset);
#pragma jli_call_always(bsx_glance_detector_set_configuration);
#pragma jli_call_always(bsx_glance_detector_set_state);
#pragma jli_call_always(bsx_glance_detector_update_interface_dependency);
#pragma jli_call_always(bsx_gravity_reckoner_do_step);
#pragma jli_call_always(bsx_gravity_reckoner_get_configuration);
#pragma jli_call_always(bsx_gravity_reckoner_get_property_id);
#pragma jli_call_always(bsx_gravity_reckoner_get_state);
#pragma jli_call_always(bsx_gravity_reckoner_get_supplier_dependency);
#pragma jli_call_always(bsx_gravity_reckoner_reset);
#pragma jli_call_always(bsx_gravity_reckoner_set_configuration);
#pragma jli_call_always(bsx_gravity_reckoner_set_state);
#pragma jli_call_always(bsx_gravity_reckoner_update_if_config);
#pragma jli_call_always(bsx_gravity_reckoner_update_interface_dependency);
#pragma jli_call_always(bsx_gyroscope_calibrator_do_step);
#pragma jli_call_always(bsx_gyroscope_calibrator_get_configuration);
#pragma jli_call_always(bsx_gyroscope_calibrator_get_property_id);
#pragma jli_call_always(bsx_gyroscope_calibrator_get_state);
#pragma jli_call_always(bsx_gyroscope_calibrator_reset);
#pragma jli_call_always(bsx_gyroscope_calibrator_set_configuration);
#pragma jli_call_always(bsx_gyroscope_calibrator_set_state);
#pragma jli_call_always(bsx_gyroscope_calibrator_update_interface_dependency);
#pragma jli_call_always(bsx_init);
#pragma jli_call_always(bsx_library_output_gates_configure);
#pragma jli_call_always(bsx_library_output_gates_get_configuration);
#pragma jli_call_always(bsx_magneticfield_calibrator_classical_do_step);
#pragma jli_call_always(bsx_magneticfield_calibrator_classical_get_configuration);
#pragma jli_call_always(bsx_magneticfield_calibrator_classical_get_property_id);
#pragma jli_call_always(bsx_magneticfield_calibrator_classical_get_state);
#pragma jli_call_always(bsx_magneticfield_calibrator_classical_reset);
#pragma jli_call_always(bsx_magneticfield_calibrator_classical_set_configuration);
#pragma jli_call_always(bsx_magneticfield_calibrator_classical_set_state);
#pragma jli_call_always(bsx_magneticfield_calibrator_classical_update_interface_dependency);
#pragma jli_call_always(bsx_magneticfield_calibrator_fast_do_step);
#pragma jli_call_always(bsx_magneticfield_calibrator_fast_get_configuration);
#pragma jli_call_always(bsx_magneticfield_calibrator_fast_get_property_id);
#pragma jli_call_always(bsx_magneticfield_calibrator_fast_get_state);
#pragma jli_call_always(bsx_magneticfield_calibrator_fast_reset);
#pragma jli_call_always(bsx_magneticfield_calibrator_fast_set_configuration);
#pragma jli_call_always(bsx_magneticfield_calibrator_fast_set_state);
#pragma jli_call_always(bsx_magneticfield_calibrator_fast_update_interface_dependency);
#pragma jli_call_always(bsx_magneticfield_monitor_do_step);
#pragma jli_call_always(bsx_magneticfield_monitor_get_configuration);
#pragma jli_call_always(bsx_magneticfield_monitor_get_property_id);
#pragma jli_call_always(bsx_magneticfield_monitor_get_state);
#pragma jli_call_always(bsx_magneticfield_monitor_reset);
#pragma jli_call_always(bsx_magneticfield_monitor_set_configuration);
#pragma jli_call_always(bsx_magneticfield_monitor_set_state);
#pragma jli_call_always(bsx_magneticfield_monitor_update_interface_dependency);
#pragma jli_call_always(bsx_pickup_detector_do_step);
#pragma jli_call_always(bsx_pickup_detector_get_configuration);
#pragma jli_call_always(bsx_pickup_detector_get_property_id);
#pragma jli_call_always(bsx_pickup_detector_get_state);
#pragma jli_call_always(bsx_pickup_detector_reset);
#pragma jli_call_always(bsx_pickup_detector_set_configuration);
#pragma jli_call_always(bsx_pickup_detector_set_state);
#pragma jli_call_always(bsx_pickup_detector_update_interface_dependency);
#pragma jli_call_always(bsx_preprocessor_acceleration_do_step);
#pragma jli_call_always(bsx_preprocessor_acceleration_get_configuration);
#pragma jli_call_always(bsx_preprocessor_acceleration_get_property_id);
#pragma jli_call_always(bsx_preprocessor_acceleration_get_state);
#pragma jli_call_always(bsx_preprocessor_acceleration_reset);
#pragma jli_call_always(bsx_preprocessor_acceleration_set_configuration);
#pragma jli_call_always(bsx_preprocessor_acceleration_set_state);
#pragma jli_call_always(bsx_preprocessor_acceleration_update_interface_dependency);
#pragma jli_call_always(bsx_preprocessor_angularrate_do_step);
#pragma jli_call_always(bsx_preprocessor_angularrate_get_configuration);
#pragma jli_call_always(bsx_preprocessor_angularrate_get_property_id);
#pragma jli_call_always(bsx_preprocessor_angularrate_get_state);
#pragma jli_call_always(bsx_preprocessor_angularrate_reset);
#pragma jli_call_always(bsx_preprocessor_angularrate_set_configuration);
#pragma jli_call_always(bsx_preprocessor_angularrate_set_state);
#pragma jli_call_always(bsx_preprocessor_angularrate_update_interface_dependency);
#pragma jli_call_always(bsx_preprocessor_magneticfield_classic_do_step);
#pragma jli_call_always(bsx_preprocessor_magneticfield_classic_get_configuration);
#pragma jli_call_always(bsx_preprocessor_magneticfield_classic_get_property_id);
#pragma jli_call_always(bsx_preprocessor_magneticfield_classic_get_state);
#pragma jli_call_always(bsx_preprocessor_magneticfield_classic_reset);
#pragma jli_call_always(bsx_preprocessor_magneticfield_classic_set_configuration);
#pragma jli_call_always(bsx_preprocessor_magneticfield_classic_set_state);
#pragma jli_call_always(bsx_preprocessor_magneticfield_classic_update_interface_dependency);
#pragma jli_call_always(bsx_preprocessor_magneticfield_fast_do_step);
#pragma jli_call_always(bsx_preprocessor_magneticfield_fast_get_configuration);
#pragma jli_call_always(bsx_preprocessor_magneticfield_fast_get_property_id);
#pragma jli_call_always(bsx_preprocessor_magneticfield_fast_get_state);
#pragma jli_call_always(bsx_preprocessor_magneticfield_fast_reset);
#pragma jli_call_always(bsx_preprocessor_magneticfield_fast_set_configuration);
#pragma jli_call_always(bsx_preprocessor_magneticfield_fast_set_state);
#pragma jli_call_always(bsx_preprocessor_magneticfield_fast_update_interface_dependency);
#pragma jli_call_always(bsx_reset);
#pragma jli_call_always(bsx_rotation_to_orientation);
#pragma jli_call_always(bsx_set_configuration);
#pragma jli_call_always(bsx_set_debug_level);
#pragma jli_call_always(bsx_set_state);
#pragma jli_call_always(bsx_significantmotion_detector_do_step);
#pragma jli_call_always(bsx_significantmotion_detector_get_configuration);
#pragma jli_call_always(bsx_significantmotion_detector_get_property_id);
#pragma jli_call_always(bsx_significantmotion_detector_get_state);
#pragma jli_call_always(bsx_significantmotion_detector_reset);
#pragma jli_call_always(bsx_significantmotion_detector_set_configuration);
#pragma jli_call_always(bsx_significantmotion_detector_set_state);
#pragma jli_call_always(bsx_significantmotion_detector_update_interface_dependency);
#pragma jli_call_always(bsx_step_detector_do_step);
#pragma jli_call_always(bsx_step_detector_get_configuration);
#pragma jli_call_always(bsx_step_detector_get_property_id);
#pragma jli_call_always(bsx_step_detector_get_state);
#pragma jli_call_always(bsx_step_detector_reset);
#pragma jli_call_always(bsx_step_detector_set_configuration);
#pragma jli_call_always(bsx_step_detector_set_state);
#pragma jli_call_always(bsx_step_detector_update_interface_dependency);
#pragma jli_call_always(bsx_tap_detector_do_step);
#pragma jli_call_always(bsx_tap_detector_get_configuration);
#pragma jli_call_always(bsx_tap_detector_get_property_id);
#pragma jli_call_always(bsx_tap_detector_get_state);
#pragma jli_call_always(bsx_tap_detector_reset);
#pragma jli_call_always(bsx_tap_detector_set_configuration);
#pragma jli_call_always(bsx_tap_detector_set_state);
#pragma jli_call_always(bsx_tap_detector_update_interface_dependency);
#pragma jli_call_always(bsx_tilt_detector_do_step);
#pragma jli_call_always(bsx_tilt_detector_get_configuration);
#pragma jli_call_always(bsx_tilt_detector_get_property_id);
#pragma jli_call_always(bsx_tilt_detector_get_state);
#pragma jli_call_always(bsx_tilt_detector_reset);
#pragma jli_call_always(bsx_tilt_detector_set_configuration);
#pragma jli_call_always(bsx_tilt_detector_set_state);
#pragma jli_call_always(bsx_tilt_detector_update_interface_dependency);
#pragma jli_call_always(bsx_turnoff_magneticfield_offset_do_step);
#pragma jli_call_always(bsx_turnoff_magneticfield_offset_get_configuration);
#pragma jli_call_always(bsx_turnoff_magneticfield_offset_get_property_id);
#pragma jli_call_always(bsx_turnoff_magneticfield_offset_get_state);
#pragma jli_call_always(bsx_turnoff_magneticfield_offset_get_supplier_dependency);
#pragma jli_call_always(bsx_turnoff_magneticfield_offset_reset);
#pragma jli_call_always(bsx_turnoff_magneticfield_offset_set_configuration);
#pragma jli_call_always(bsx_turnoff_magneticfield_offset_set_state);
#pragma jli_call_always(bsx_turnoff_magneticfield_offset_update_if_config);
#pragma jli_call_always(bsx_turnoff_magneticfield_offset_update_interface_dependency);
#pragma jli_call_always(bsx_update_subscription);
#pragma jli_call_always(bsx_wrist_tilt_detector_do_step);
#pragma jli_call_always(bsx_wrist_tilt_detector_get_configuration);
#pragma jli_call_always(bsx_wrist_tilt_detector_get_property_id);
#pragma jli_call_always(bsx_wrist_tilt_detector_get_state);
#pragma jli_call_always(bsx_wrist_tilt_detector_reset);
#pragma jli_call_always(bsx_wrist_tilt_detector_set_configuration);
#pragma jli_call_always(bsx_wrist_tilt_detector_set_state);
#pragma jli_call_always(bsx_wrist_tilt_detector_update_interface_dependency);
#pragma jli_call_always(c_ConditionerBsx_configure);
#pragma jli_call_always(c_any);
#pragma jli_call_always(constructor_AccelerationMonitor);
#pragma jli_call_always(constructor_AccelerometerCalibrator);
#pragma jli_call_always(constructor_ActivityRecognizer);
#pragma jli_call_always(constructor_Bsx);
#pragma jli_call_always(constructor_ConditionerBsx);
#pragma jli_call_always(constructor_DirectionTrackerCompass);
#pragma jli_call_always(constructor_DirectionTrackerImu);
#pragma jli_call_always(constructor_DirectionTrackerNdof);
#pragma jli_call_always(constructor_GlanceDetector);
#pragma jli_call_always(constructor_GravityReckoner);
#pragma jli_call_always(constructor_GyroscopeCalibrator);
#pragma jli_call_always(constructor_MagneticFieldMonitor);
#pragma jli_call_always(constructor_MagnetometerCalibrator);
#pragma jli_call_always(constructor_MagnetometerCalibratorFast);
#pragma jli_call_always(constructor_PickupDetector);
#pragma jli_call_always(constructor_PreProcessor);
#pragma jli_call_always(constructor_SignificantMotionDetector);
#pragma jli_call_always(constructor_StepDetector);
#pragma jli_call_always(constructor_TapDetector);
#pragma jli_call_always(constructor_TiltDetector);
#pragma jli_call_always(constructor_TurnOff);
#pragma jli_call_always(constructor_WristTilt);
#pragma jli_call_always(d_any);
#pragma jli_call_always(e_any);
#pragma jli_call_always(f_any);
#pragma jli_call_always(g_any);
#pragma jli_call_always(h_any);
#pragma jli_call_always(invSqrtF);
#pragma jli_call_always(ladon_channel_calculate_min_sample_intvl);
#pragma jli_call_always(ladon_channel_configure_distributor_links);
#pragma jli_call_always(ladon_channel_init);
#pragma jli_call_always(ladon_channel_list_find_channel_by_distrib_id);
#pragma jli_call_always(ladon_channel_list_find_channel_by_id);
#pragma jli_call_always(ladon_channel_list_find_channel_by_supplier_id);
#pragma jli_call_always(ladon_channel_min_requested_sample_intvl);
#pragma jli_call_always(ladon_channel_queue_append);
#pragma jli_call_always(ladon_channel_queue_clear);
#pragma jli_call_always(ladon_channel_queue_cycle_copy);
#pragma jli_call_always(ladon_channel_queue_do);
#pragma jli_call_always(ladon_channel_reset);
#pragma jli_call_always(ladon_channel_set_sample_intvl);
#pragma jli_call_always(ladon_channel_strategy_NORMAL);
#pragma jli_call_always(ladon_compound_get_operation_state);
#pragma jli_call_always(ladon_crc);
#pragma jli_call_always(ladon_distributor_calculate_required_sample_intvl);
#pragma jli_call_always(ladon_distributor_configure_links);
#pragma jli_call_always(ladon_distributor_decimating_accumulate);
#pragma jli_call_always(ladon_distributor_decimating_configure_links);
#pragma jli_call_always(ladon_distributor_decimating_forward);
#pragma jli_call_always(ladon_distributor_decimating_get_default_link);
#pragma jli_call_always(ladon_distributor_decimating_init);
#pragma jli_call_always(ladon_distributor_decimating_report);
#pragma jli_call_always(ladon_distributor_decimating_reset_decimator);
#pragma jli_call_always(ladon_distributor_decimating_reset_state);
#pragma jli_call_always(ladon_distributor_get_default_link);
#pragma jli_call_always(ladon_distributor_init);
#pragma jli_call_always(ladon_distributor_resampling_configure_links);
#pragma jli_call_always(ladon_distributor_resampling_forward);
#pragma jli_call_always(ladon_distributor_resampling_get_default_link);
#pragma jli_call_always(ladon_distributor_resampling_init);
#pragma jli_call_always(ladon_distributor_resampling_report);
#pragma jli_call_always(ladon_distributor_resampling_reset_resampler);
#pragma jli_call_always(ladon_distributor_resampling_reset_state);
#pragma jli_call_always(ladon_distributor_set_sample_intvl);
#pragma jli_call_always(ladon_get_datatype_size);
#pragma jli_call_always(ladon_get_version);
#pragma jli_call_always(ladon_library_add_input_gate);
#pragma jli_call_always(ladon_library_add_output_gate);
#pragma jli_call_always(ladon_library_append);
#pragma jli_call_always(ladon_library_do_steps);
#pragma jli_call_always(ladon_library_dump);
#pragma jli_call_always(ladon_library_dump_network_channels);
#pragma jli_call_always(ladon_library_dump_network_links);
#pragma jli_call_always(ladon_library_frame_serialized_data);
#pragma jli_call_always(ladon_library_get_configuration);
#pragma jli_call_always(ladon_library_get_hyper_configuration);
#pragma jli_call_always(ladon_library_get_hyper_property_ids);
#pragma jli_call_always(ladon_library_get_hyper_state);
#pragma jli_call_always(ladon_library_get_multiple_outputs);
#pragma jli_call_always(ladon_library_get_sensor_characteristics);
#pragma jli_call_always(ladon_library_get_single_output);
#pragma jli_call_always(ladon_library_get_state);
#pragma jli_call_always(ladon_library_parse);
#pragma jli_call_always(ladon_library_reset);
#pragma jli_call_always(ladon_library_reset_hyper);
#pragma jli_call_always(ladon_library_set_configuration);
#pragma jli_call_always(ladon_library_set_hyper_configuration);
#pragma jli_call_always(ladon_library_set_hyper_state);
#pragma jli_call_always(ladon_library_set_state);
#pragma jli_call_always(ladon_library_update_subscription);
#pragma jli_call_always(ladon_library_validate_serialization);
#pragma jli_call_always(ladon_outputgate_reset);
#pragma jli_call_always(ladon_outputgate_transparent_get);
#pragma jli_call_always(ladon_outputgate_transparent_get_config);
#pragma jli_call_always(ladon_outputgate_transparent_init);
#pragma jli_call_always(ladon_outputgate_transparent_scale3d_wo_status);
#pragma jli_call_always(ladon_outputgate_transparent_scale3d_ww_status);
#pragma jli_call_always(ladon_outputgate_transparent_set_config);
#pragma jli_call_always(ladon_ring_buffer_add);
#pragma jli_call_always(ladon_ring_buffer_add_unique);
#pragma jli_call_always(ladon_ring_buffer_get);
#pragma jli_call_always(ladon_ring_buffer_get_ptr);
#pragma jli_call_always(ladon_ring_buffer_reset);
#pragma jli_call_always(ladon_supplier_direct_get);
#pragma jli_call_always(ladon_supplier_direct_notify);
#pragma jli_call_always(ladon_supplier_direct_reset);
#pragma jli_call_always(ladon_supplier_flipflop_get);
#pragma jli_call_always(ladon_supplier_flipflop_get_with_limit);
#pragma jli_call_always(ladon_supplier_flipflop_notify);
#pragma jli_call_always(ladon_supplier_flipflop_reset);
#pragma jli_call_always(ladon_supplier_init);
#pragma jli_call_always(ladon_supplier_reset);
#pragma jli_call_always(ladon_supplier_ringbuffer_clear);
#pragma jli_call_always(ladon_supplier_ringbuffer_data2buffer);
#pragma jli_call_always(ladon_supplier_ringbuffer_get);
#pragma jli_call_always(ladon_supplier_ringbuffer_get_with_limit);
#pragma jli_call_always(ladon_supplier_ringbuffer_notify);
#pragma jli_call_always(ladon_supplier_ringbuffer_reset);
#pragma jli_call_always(ladon_supplier_set_sample_intvl);
#pragma jli_call_always(ladon_supplier_set_state);
#pragma jli_call_always(ladon_supplier_transparent_get);
#pragma jli_call_always(ladon_supplier_transparent_get_with_limit);
#pragma jli_call_always(ladon_supplier_transparent_notify);
#pragma jli_call_always(ladon_supplier_transparent_reset);
#pragma jli_call_always(ladon_to_header_version);
#pragma jli_call_always(ladon_user_queue_cycle);
#pragma jli_call_always(mean);
#pragma jli_call_always(quat2Euler);
#pragma jli_call_always(bsx_mt_trigger_thread);
#pragma jli_call_always(bsx_enter_critical_section);
#pragma jli_call_always(bsx_leave_critical_section);

#endif /* !JLI_H */
